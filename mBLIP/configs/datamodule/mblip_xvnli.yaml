defaults:
 # base trident datamodule configuration
 - trident

dataloader_cfg:
  # the `dataloder_cfg` straightforwardly implements the logic for dataloading
  # in line with other relevant configuration.
  # --- dataloader_cfg-level namespace ---
  collate_fn:
    _target_: src.tasks.vllm.data.DataCollatorForVisualCLM
    tokenizer:
      _target_: transformers.AutoTokenizer.from_pretrained
      pretrained_model_name_or_path: ${llm}

dataset_cfg:
  _target_: datasets.load.load_dataset
  _method_:
    map: # dataset.map -> tokenization
      function:
        _target_: src.tasks.vllm.data.TokenizeCLM
        pretrained_model: ${llm}
        context_column: context
        target_column: label
        template: 'Is it guaranteed true that "{}"? Yes, no, or maybe? Answer in English:'
        text_target_column: text_label
        target2str: { "yes": "yes", "no": "no", "maybe": "maybe" }
      batched: True
    set_transform:
      transform:
        _target_: src.tasks.vllm.data.LoadTransformImage
        processor: ${blip_model}
        image_root: ${flickr_image_root}
        extension: ".jpg"
#    with_format:
#      type: "torch"
  train:
    split: train
    path: json
    data_files: ${train_data}/xvnli/xvnli_input_train.json
    _method_:
      set_transform:
        transform:
          _target_: src.tasks.vllm.data.LoadTransformImage
          processor: ${blip_model}
          image_root: ${flickr_image_root}
          extension: ".jpg"
          train: True
  val:
    _datasets_:
#      xvnli_ar_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_ar.json
#      xvnli_es_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_es.json
      xvnli_fr_val:
        split: train[:1800]
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_val_fr.json
#      xvnli_ru_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_ru.json
      xvnli_en_val:
        split: train[:1800]
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_val_en.json
  test:
    _datasets_:
#      xvnli_ar_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_ar.json
#      xvnli_es_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_es.json
#      xvnli_fr_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_fr.json
#      xvnli_ru_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_ru.json
#      xvnli_en_val:
#        split: train
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_en.json
      xvnli_ar_test:
        split: train
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_test_ar.json
      xvnli_es_test:
        split: train
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_test_es.json
      xvnli_fr_test:
        split: train
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_test_fr.json
      xvnli_ru_test:
        split: train
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_test_ru.json
      xvnli_en_test:
        split: train
        path: json
        data_files: ${train_data}/xvnli/xvnli_input_test_en.json
#      xvnli_fr_val:
#        split: train[:1800]
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_fr.json
#      xvnli_en_val:
#        split: train[:1800]
#        path: json
#        data_files: ${train_data}/xvnli/xvnli_input_val_en.json
